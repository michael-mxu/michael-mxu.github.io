<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CMU15-445 学习笔记 (一)</title>
    <link href="/2023-databases-project0.html"/>
    <url>/2023-databases-project0.html</url>
    
    <content type="html"><![CDATA[<h2 id="1-介绍">1. 介绍</h2><p>博主对大数据相关的技术很感兴趣，大概了解了一下这个领域所需要的技能和当前的发展状态，深感个人基础薄弱。架不住兴趣的驱使，决定好好补一补这一方面的知识体系。</p><p>博主很早就对 CMU15-445/645 这门数据库入门神课有所耳闻； 尤其是课程附带的项目， 刷过的人都赞不绝口。 正好博主前段时间恶补了一番三四年没碰过的 C/C++，遂决心闯一闯这门课。</p><h2 id="2-Lecture-1-2-关系型数据库概述和SQL">2. Lecture #1-#2: 关系型数据库概述和SQL</h2><p>博主选择了2022Fall 由 Andy Pavlo 主讲的版本。不得不说，课程片头、结尾和音乐很带感，总让我联想到绝命毒师或者切尔诺贝利，恍惚间仿佛在刷剧。</p><p>第一个晚上博主听完了两节视频课。第一节课是绪论课，主要讲了几个关于数据库的一些基本概念，尤其突出了使用 DBMS (<strong>D</strong>ata<strong>b</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem)管理、分析数据的优势和必要性，以及关系模型的一些东西。 第二节课围绕SQL展开。教授直接在黑框中演示不同数据库下SQL指令的执行效果，效果个人认为比PPT干讲好很多。这节课程在基础的联接查询、聚合查询、嵌套查询等SQL常用查询技术的基础上，额外增加了一些相对高级的特性，主要是窗口函数和循环查询。博主此前有过一些 SQL 积累，加上 SQL 本身作为声明式的语言，语法简单，所以对大部分内容的理解都没有障碍。但是不得不说，最后扩展的循环查询大大超出了我对 SQL 以往的认知。后面关于作业部分再细讲。</p><p>这门课程有要求先修 CMU15-213，因为课程会涉及一些操作系统方面的内容。博主本科阶段的背景其实更偏电气，操作系统、编译原理等计算机专业硬课学得并不多，颇为担心后期的学习是否乏力。另一方面，Andy老师的讲话语速是真的很快，本菜鸡表示没有字幕很难跟上… 就当练耳吧。</p><h2 id="3-第一次课程作业">3. 第一次课程作业</h2><p>前两节课布置了一个 SQL 作业和 Project0。 SQL 作业是利用 SQLite3 从提供的 IMDB 数据中检索信息。 不得不赞叹一下这门课的配套设施。课程网站提供了非常详细的说明和课程资料，作业是在Gradescope自动评分系统中进行提交和检查；课程同时还提供了专门的论坛，且活跃度相当不错。总之，不愧神课之名。</p><p>SQL 作业包含10个具体的查询问题，作业评分需要提供对应的查询语句文件。 总的来看，前面 9 个问题在能完全理解清除题意的前提下，都没有太大难度。博主也好几个月没碰 SQL 了，依然可以比较快速的完成查询目标。稍微有坑的地方就是不同的 DBMS 在一些 SQL 语法上有差异，比如，SQLite 对字符串连接采用 <code>||</code>， 而 MySQL 提供了 <code>STRCAT</code> 函数；在一些时间处理函数上也存在一些差异。</p><p>第 10 个问题要求排序且按照指定格式串联查询到的字符串。老师给了提示，使用循环查询。说实话，博主在刚看到这个问题时是懵逼的，理解题意都花了老半天， 而这种查询需求也是相当怪异。 Andy 老师在课堂上提供了一段循环查询的例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span> cteSource (counter) <span class="hljs-keyword">AS</span> (<br>  (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">UNION</span><br>  (<span class="hljs-keyword">SELECT</span> counter <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">FROM</span> cteSource<br>  <span class="hljs-keyword">WHERE</span> counter <span class="hljs-operator">&lt;</span> <span class="hljs-number">10</span>) <br>)<br></code></pre></td></tr></table></figure><p>该查询语句的输出是 1 到 10 的整数序列。但是这段查询语句具体的执行逻辑，博主并不清楚。于时点进了课程文档中提供的<a href="https://sqlite.org/lang_with.html">更详细的解释</a>，瞬间刷新了对 SQL 的认知。 不得不说，还是自己太菜。</p><h3 id="WITH-RECURSIVE-的执行规则">WITH RECURSIVE 的执行规则</h3><p><img src="/img/post_img/CMU15-445/WITH_RECURSIVE.png" alt=""><br><code>WITH RECURSIVE</code> 语句的构成如上图所示，需要提供一个结果表名，初始选择子句和递归选择子句，其中初始选择语句和迭代选择语句用 <code>UNION</code> 进行连接。可以看到，课堂中老师展示的例子和图中的表示也是非常一致的。</p><p>该语句执行的规则如下：</p><ul><li><ol><li>运行初始选择子句，讲查询结果放入队列；</li></ol></li><li><ol start="2"><li>检查队列，若队列不为空：</li></ol><ul><li>a. 从队列中弹出一条记录；</li><li>b. 将该条记录插入结果表中；</li><li>c. 将该条记录视作表格中的唯一记录，运行递归选择子句，并将查询结果放入队列；</li></ul></li></ul><p>值得注意的是，该语句可以有不同的变化：</p><ul><li><ol><li><code>UNION</code> 和 <code>UNION ALL</code>： 使用 <code>UNION</code> 时，只加入不重复的记录到队列中；而 <code>UNION ALL</code> 则可以加入重复的记录；</li></ol></li><li><ol start="2"><li><code>LIMIT</code>： 若提供了 LIMIT 子句 (提供大于等于 0 的整数)，迭代过程会在结果表到达 LIMIT 限制的记录条数时终止；若为 0， 则没有数被插入结果表；</li></ol></li><li><ol start="3"><li><code>OFFSET</code>: 若提供了 OFFSET 子句 (正数 N)，迭代过程产生的前 N 条记录会被跳过；</li></ol></li><li><ol start="4"><li><code>ORDER BY</code>： 指明出队的顺序。 可以利用其实现深度优先和广度优先的遍历；</li></ol></li></ul><p>在理清了该语句的具体执行规则后，博主结合窗口函数，成功解答了第 10 问题。 踩了一个小坑， 题目要求连接不同的电影名，因此必须要在某个地方加 <code>DISTINCT</code> ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span> tb1(concat_title,counter) <span class="hljs-keyword">AS</span> (<br>    <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>    <span class="hljs-keyword">SELECT</span> concat_title<span class="hljs-operator">||</span><span class="hljs-string">&#x27;, &#x27;</span><span class="hljs-operator">||</span>title, n<br>    <span class="hljs-keyword">FROM</span><br>        (<br><span class="hljs-keyword">SELECT</span> title, <br>       <span class="hljs-built_in">ROW_NUMBER</span>() <span class="hljs-keyword">OVER</span>(<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> title) <span class="hljs-keyword">AS</span> n<br>       <span class="hljs-keyword">FROM</span>(<br>            <span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> title <br>            <span class="hljs-keyword">FROM</span> akas <span class="hljs-keyword">JOIN</span> titles <span class="hljs-keyword">USING</span>(title_id)<br>            <span class="hljs-keyword">WHERE</span> primary_title <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-string">&#x27;House of the Dragon&#x27;</span> <br>                  <span class="hljs-keyword">AND</span> type <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-string">&#x27;tvSeries&#x27;</span><br>            ) <br>        )<br><span class="hljs-keyword">JOIN</span> tb1 <span class="hljs-keyword">ON</span> n <span class="hljs-operator">=</span><span class="hljs-operator">=</span> counter <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>)<br><span class="hljs-keyword">SELECT</span> SUBSTR(concat_title,<span class="hljs-number">3</span>)<br><span class="hljs-keyword">FROM</span> tb1<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> counter <span class="hljs-keyword">DESC</span><br>LIMIT <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>课程文档中老师估计大家会花 6-8个小时完成这个作业，不得不说还是挺精准的。本以为自己能很快完成，结果最后一题直接卡了 2+ 小时。</p><h2 id="4-Project-0-C-实现字典树">4. Project 0: C++实现字典树</h2><p>此项目单开一篇细讲。踩了很多坑，也有很多收获。</p><h2 id="总结">总结</h2><p>希望自己能存活到最后吧。从成功闯关的大佬们的经历来看， 扎实刷完这门课的所有项目大概需要 1 个月。加油 ！</p>]]></content>
    
    
    <categories>
      
      <category>系统架构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据库系统</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>烟火帝都之食在帝都: 火锅篇</title>
    <link href="/2023-beijing-hotpot.html"/>
    <url>/2023-beijing-hotpot.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>生活里的惊喜，来源于你踏踏实实的热爱着它以及融入了它以后对它的理解。在一个不拥挤不喧嚣没有吵闹的周末，上街买菜回家淘米开火，可以穿着旗袍踩着拖鞋系着围裙下厨房，是一件美丽而浪漫的事情。食物和你的恋人一样，唯有真心与用心烹制，才有齿间留香的余味。全天下的好女子和好男子，都应该在炊烟和炒锅前熨过，知道生活是一件严肃且慵懒的事情，你的食物，养育着你的心肝脾肺，它是什么样的，你就是什么样的。</p><p><strong>唯有美食与爱，不可辜负。</strong></p></blockquote><span id="more"></span><h2 id="前言">前言</h2><p>五一小长假的一天，和菡菡走在人群熙攘的大街上。她眨巴着透亮的大眼睛，问道：“那你觉得最开心的事是什么呢？” 一时间，我有些不知所措，因为对上一段开心时光的印象，竟然已经模糊又遥远了。</p><p>细想之下，甚至有些恐慌。许多时候，自己也不过是行色匆匆的人潮中，被推搡着前行的一块朽木罢了，不知何时，已然丧失了对时光流逝的感知力。上一段快乐的时光是什么时候呢？是屡次遭拒的论文被接收那一刻吗？那也只是短暂一瞬的如释重负，实在难掩繁琐纷乱的科研生活给自己身心带来的长久创伤。是发现灵光一现的 idea 可行的那一刻吗？不能否认，那确实能带来喷涌而出的舒畅感；然而，往往需要有更清醒的认识：在没有达到最终目的之前，许多探索可能都是枉然和徒劳的。很可笑，我脑海中浮现出的两段多少与快乐有些沾边的生活片段，竟都来源于我一心想逃离的部分；而对除之以外的一切，内心却都是茫然的，麻木的， 迟钝的。</p><p>猛然间，我又意识到， 那些所谓的能带来长久快乐感的事务，或许并不存在。我们必须相信，快乐的本质就是短暂的。从生物学的角度来看，快乐不过是激素水平变化带来的 “幻觉”。若大脑被 “快乐” 激素长久的刺激，大脑对这些激素的感知也会逐渐下降，导致那些原本能带来强烈快乐感的事务也无法产生同等的快乐感了。从哲学的角度来看，快乐源于人的欲望得到满足，而人无法永远让自己的欲望得到满足。这也注定了，人的一生，究其本质，是悲观的，是痛苦的。</p><blockquote><p><em>把生活的计划瞄准在避免痛苦，亦即远离匮乏、疾病和各种苦难这一目标上。这是我们所认识到的这个世界所能给予我们最好的东西，就是一种没有苦痛的、宁静的和可以让我们勉强忍受下去的生存；我们必须限制对这个世界的期望和要求，这样我们才能更有把握实现它们。而要避免很不幸福的最保险的方法就是不要要求很幸福。 ——叔本华</em></p></blockquote><p>恍惚间，内心释然了：所以，有什么好想的呢。此刻，我还可以拉着菡菡的手，沐浴在还算舒适的阳光下，呼吸着还算新鲜的空气，无所事事的走在熙攘的街头，这本身就是快乐的吧。如果这时候，还能享受一餐美味，岂不更乐哉。人生在世，吃穿二字。我想，重新拾起对快乐的感知，或许可以从美食开始。食物带来的直接的感官体验，想必是最容易获取的当下的快乐吧。无论生活的底色是多么灰暗、苦难的，只要对食物还有感知力，就应该庆幸，至少还有机会品尝快乐的滋味。</p><p>“大概就是能和宝贝，一起吃好吃的东西吧，哈哈哈。”</p><p>博主在北京也虚度了七八个年头了。在认识菡菡之后，一起走街串巷，也算是小小弥补了一下头几年对胃欠下的帐。博主决定分门别类记录我俩一起吃过的那些好吃的餐厅，给出自己心中的帝都美食榜，并长期更新 ~</p><h2 id="第0位：Hi辣火锅-华熙Live中心店">第0位：Hi辣火锅(华熙Live中心店)</h2><ul><li><strong>口味</strong>：⭐⭐⭐⭐⭐</li><li><strong>原料</strong>：⭐⭐⭐⭐⭐</li><li><strong>环境</strong>：⭐⭐⭐⭐⭐</li><li><strong>服务</strong>：⭐⭐⭐⭐⭐</li><li><strong>位置</strong>：⭐⭐⭐⭐⭐</li><li><strong>价格</strong>：⭐⭐⭐⭐⭐</li></ul><p>这家火锅店承载着博主和菡菡的甜蜜回忆，是梦开始的地方。在情怀的加持下，博主为它留下了一个特殊的位置。博主会永远记得，第一次吃它是在 2021 年 6 月 6 日。然而，颇为遗憾的是，这家火锅虽然参与了我们甜蜜故事的开端，但是却没能挺过新冠疫情的考验，无法继续见证和参与我们的故事了…在博主心中， 它已经永远成为了帝都火锅的 “白月光”。</p><p>这家火锅给我印象最深的是变态辣牛肉，对于酷爱吃辣的朋友，非常值得一冲。博主本身吃辣能力也不差，但也不得不承认，这个辣度还是挺极限的。这家火锅的消费水平是人均 100+，用餐环境和食材还是比较有保障的。特别值得一提的，由于门店位于五棵松商业区，周边能逛的、能玩的很丰富，而且很年轻化，非常适合有心的朋友安排情侣约会。</p><h2 id="第1位：哥老官重庆美蛙鱼头火锅-apm店">第1位：哥老官重庆美蛙鱼头火锅(apm店)</h2><ul><li><strong>口味</strong>：⭐⭐⭐⭐⭐</li><li><strong>原料</strong>：⭐⭐⭐⭐⭐</li><li><strong>环境</strong>：⭐⭐⭐⭐⭐</li><li><strong>服务</strong>：⭐⭐⭐⭐⭐</li><li><strong>位置</strong>：⭐⭐⭐⭐⭐</li><li><strong>价格</strong>：⭐⭐⭐⭐⭐</li></ul><p>博主心中目前的帝都火锅头牌。这家火锅主打特色牛蛙锅底。在遇到这家店之前，博主对牛蛙与火锅的搭配嗤之以鼻，坚定的认为干锅是最适合牛蛙的烹饪方式， 从未考虑过尝试牛蛙涮火锅的吃法。这家店是菡菡第一次带我去的，非常意外，非常惊艳。着实没想到，牛蛙煮进火锅中，肉质依然非常细嫩顺滑。与干锅牛蛙的麻辣干香口感不同，火锅牛蛙在浸煮过程中，肌肉纤维在保持紧致的状态下，会同时吸纳浓浓麻辣牛油滋味，带来独特的味觉刺激。</p><p>火锅锅底是一方面，涮菜的品质是另一方面。博主和菡菡两人在这家店消费过肥牛、虾滑等常规菜品，认为菜品的品质相当不错，新鲜度没有问题，分量也足够。 他家还有很多特色菜品，我们决定慢慢尝试。</p><p>这家店的小吃也可圈可点，奶茶冰粉几乎每桌必点，而且分量非常扎实。小料台也非常丰富，足以满足天南地北食客的各种要求。</p><p>我们常去的这家店位于王府井apm，周边还是相当繁华的。但是这家店非常火爆，常规饭点去很难排上号。博主和菡菡在非常规时间就餐，4点多吃完发现门口已经开始排队了。因此，想要逛街之后犒劳一下自己的兄弟姐妹们要有心理准备。</p><p>值得一提的是，这家火锅店有生日打折活动，有优惠券可以打6.66折，相当划算 ~<br><img src="/img/post_img/hotpot/gelaoguan.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>记录生活</category>
      
    </categories>
    
    
    <tags>
      
      <tag>美食</tag>
      
      <tag>火锅</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>博客装修记之Fluid初探</title>
    <link href="/2023-fluid-hexo-deployment.html"/>
    <url>/2023-fluid-hexo-deployment.html</url>
    
    <content type="html"><![CDATA[<p>个人博客的一个重要乐趣源于其高度可定制性。这一特点对能力强、爱折腾的技术极客想必颇具吸引力。然而，博主在前端技术栈上的造诣约等于 0， 显然不在此列。 但是，作为一个多多少少讲究生活情趣且多少爱折腾的人，还是希望装点一下自己的小天地。缘此，博主选择直接部署大佬们开发的博客主题。经过挑选，决定使用 <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a> 主题。</p><h2 id="1-部署过程">1. 部署过程</h2><p>Fluid 是一款扁平化、卡片式风格的主题，主页标语的打字机动画深得吾心。Fluid 部署过程非常简单，参考<a href="https://hexo.fluid-dev.com/docs/start/">用户手册</a>即可。在博客路径下打开 Git Bash 命令行界面，运行以下指令，安装该主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>然后，在博客目录下创建 _config.fluid.yml 文件, 并将<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">主题配置文件</a>中的内容复制进去。另外 Hexo 自带配置文件 _config.yml，被称为<strong>站点配置文件</strong>。 主题配置文件优先级更高，会覆盖站点配置文件中的设置。为使用这款主题，只需要简单的指定 _config.yml 中的 theme 关键字即可， 同时还可以指定中文显示</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><p>最后，按照手册中的要求，可以手动创建关于页。运行指令</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> about<br></code></pre></td></tr></table></figure><p>该命令会在博客目录的 source 文件夹下创建 about 文件夹，并生成 <a href="http://index.md">index.md</a> 文件 (可添加个人介绍)，同时，还需要指定 layout 为 about (该 layout 是由主题定义的)。大功告成， 重新生成页面并上传即可看到崭新的博客页面~</p><h2 id="2-个性化页面元素">2. 个性化页面元素</h2><p>_config.fluid.yml 中提供了丰富的可定制化选项。结合 _config.yml，可以非常容易的打造个性化的博客页面。博主设置了页面标题、标语、页面大图等页面元素，主要参考<a href="https://hexo.fluid-dev.com/docs/guide/">用户指南</a>。具体来看，博主仅设置了以下几项：</p><ul><li><span class="label label-primary">页面标题修改</span>：修改 _config.yml 中的 title 字段。</li><li><span class="label label-primary">浏览器标签的图标</span>： 修改 _config.fluid.yml 中的 favicon 字段， 提供图片相对于 source 文件夹的路径。</li><li><span class="label label-primary">博客页面标题</span>：修改 _config.fluid.yml 中的 blog_title 字段（对应于页面导航栏左端的标题）。</li><li><span class="label label-primary">开启友链页面</span>： 在 _config.fluid.yml 中取消 menu 关键字下 links 的注释； 进一步可在 links 页面中进行配置。</li><li><span class="label label-primary">自定义页面大图</span>：在 _config.fluid.yml 中 index、post 字段下设置 banner_img 相对于 source 文件夹的路径。</li><li><span class="label label-primary">开启导航栏毛玻璃特效</span>：即在页面滚动时导航栏呈现毛玻璃效果。可在 _config.fluid.yml 的 navbar 字段中开启 ground_glass。</li><li><span class="label label-primary">自定义主页标语</span>：在 _config.fluid.yml 中设置 index 页面的 slogan 字段。</li><li><span class="label label-primary">显示文章最近更新</span>： 在 _config.fluid.yml 中设置 post 页面下的 updated 字段。</li><li><span class="label label-primary">个性化 about 页面</span>： 在 _config.fluid.yml 中设置头像、简介等内容。</li><li><span class="label label-primary">开启页面浏览计数</span>：在 _config.fluid.yml 中设置 footer 的 statistics 字段， 数据来源选择 busuanzi （与 leancloud 相比，减少了额外配置和注册的步骤）； 同时修改 post 页面中的 views 关键字，允许浏览量计数。</li></ul><p>经过以上初步配置（并重新生成、上传），博客页面渐渐有了个人辨识度，nice！</p><h2 id="3-开启评论功能">3. 开启评论功能</h2><p>虽然博主搭建个人博客的主要目的是记录，但是如果能有互动功能，以及建立 connection 的机会，当然是锦上添花。Fluid 提供了多种评论系统，但是需要折腾的程度各有千秋。博主选择了一种相对容易的方式，即使用 utterances。</p><p>utterances 是基于 github 仓库 issues 实现的评论功能，支持简单的表情，功能也挺完善，基本满足需求。具体配置步骤如下：</p><ul><li>第一步：在 _config.fluid.yml 中开启评论功能 (post 页面中设置 comments 关键字)，并设置 type 为 utterances。</li><li>第二步：新建 github 仓库用于存放评论，并设置为 public。</li><li>第三步：为新建的仓库安装 <a href="https://github.com/apps/utterances">utterances app</a>。</li><li>第四步：配置 utterances 中的以下项目：<ul><li>指定 repo 为新建仓库，即 &lt;Github Username&gt;/&lt;Repo Name&gt;</li><li>设置 Issue Mapping 为 Issue title contains page pathname (即 issue 会以网页的 title 作为标题)</li></ul></li><li>第五步：在 _config.fluid.yml 中填写 utterances 的 repo、issue_term、theme、label（可不填写）、crossorigin 字段， 示例如下</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">utterances:</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">xxxxx/blog-comments</span><br>  <span class="hljs-attr">issue_term:</span> <span class="hljs-string">pathname</span><br>  <span class="hljs-attr">label:</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">github-light</span><br>  <span class="hljs-attr">theme-dark:</span> <span class="hljs-string">github-dark</span><br>  <span class="hljs-attr">crossorigin:</span> <span class="hljs-string">anonymous</span><br></code></pre></td></tr></table></figure><p>完成以上步骤后，重新生成页面，即可看到每个文章页面底部都增加了评论框。</p><div class="note note-danger">            <p><strong>注意</strong>：不能违反相关<a href="http://www.cac.gov.cn/2019-12/20/c_1578375159509309.htm">法律法规</a>。</p>          </div><h2 id="4-初步-SEO">4. 初步 SEO</h2><p>SEO 即搜索引擎优化 ( <strong>S</strong>erach <strong>E</strong>ngine <strong>O</strong>ptimization )，目的是提高搜索引擎的检索率，从而扩大影响力。博主其实并没有多少推广需求，但是个人博客如果能发挥名片的作用，还是相当不错的。因此，博主对网页做了简单的 SEO。 主要是在 _config.yml 中设置了页面的 keywords 字段， 同时简单优化了页面的 URL。</p><p>Hexo 博客文章默认的 URL 包括一长串的日期，导致链接过深，对搜索引擎并不友好。因此，应当适当的缩短链接。缩短链接可以直接在 _config.yml 中设置 permlink， 删除日期，保留文章标题即可。但是，博主可能需要发布中文文章，以标题作为 URL 多少不够优雅。因此，博主安装了 hexo-abbrlink 插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-abbrlink --save<br></code></pre></td></tr></table></figure><p>在 _config.yml 中进行如下设置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">permlink:</span> <span class="hljs-string">:abbrlink.html</span><br><span class="hljs-comment"># 若在博文 Front-matter 中自定义 abbrlink，则注释下面 3 行。</span><br><span class="hljs-attr">abbrlink:</span>             <br>  <span class="hljs-attr">alg:</span> <span class="hljs-string">crc32</span><br>  <span class="hljs-attr">rep:</span> <span class="hljs-string">hex</span><br></code></pre></td></tr></table></figure><p>这样，插件会根据标题生成固定长度的编码作为博文的链接。如果希望自定义 abbrlink， 则可以注释掉所标注的 3 行字段，并在每篇博文的 Front-matter 中指定 abbrlink</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">abbrlink:</span> <span class="hljs-number">2023</span><span class="hljs-string">-hexo-fluid-deployment</span><br></code></pre></td></tr></table></figure><p>SEO 优化还有很多其它技巧，包括生成站点地图、添加主动推送等， 这些就留到以后再折腾吧···</p><div class="note note-info">            <p>如果是在 vscode 中打开 markdown 文档编辑 abbrlink，需要注意不能同时本地预览页面，即需要 Ctrl+C 退出 <code>hexo s</code>，否则会导致文档无法保存。</p>          </div><h2 id="总结">总结</h2><p>一番折腾后，博主的博客页面终于有了极大改观。总的来说，利用现有框架搭建博客并进行个性化定制对新手非常友好，还能带来自由 DIY 的无穷快感。当然，目前博主进行的页面优化还是很初步的，增添其它更丰富的功能还需要进一步的探索。折腾无止境，让我们一起来折腾吧~</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>起飞！基于Hexo框架的个人博客搭建与部署实录</title>
    <link href="/2023-hexo-framework-deployment.html"/>
    <url>/2023-hexo-framework-deployment.html</url>
    
    <content type="html"><![CDATA[<p>近来，博主PhD生涯遭遇重大挫折。在幻灭感和虚无感的双重挤压下，精神备受煎熬。自忖学术道路难以为继，奋然决心技术转型。</p><p>在 Web 2.0 时代，个人博客是一块难得的精神自留地，同时也是记录个人成长的良好载体。以建立个人博客作为探索技术转型路的开端，颇有象征意义，也挺 Cool。</p><p>博主作为小白，决定选择基于一种相对成熟、社区相对活跃的开源框架，即 <a href="https://hexo.io/">Hexo</a>，来搭建个人博客。大概花了一天时间才折腾出一点眉目。</p><h2 id="1-为什么是-Hexo">1. 为什么是 Hexo</h2><p>对博主而言，入坑 Hexo 是因为注意到几位自己关注的技术大佬在用它做博客，且主题酷炫，颇对我胃口。经过进一步了解，发现 Hexo 生成的是静态页面，可托管于 Github，因此搭建成本不高；且教程简明、丰富，容易实操。同时，Hexo能满足技术博客最基本的 Markdown 语法支持。因此，博主选择了利用 Hexo 搭建自己的第一个博客。</p><p>事实上，博客框架还有其它选择，如 Wordpress，Hugo，Jekyll 等。静态博客框架的选择可以参考 <a href="https://jamstack.org/">Static Site Generators</a>。这些，就留到以后再折腾吧···</p><h2 id="2-准备工作">2. 准备工作</h2><p>搭建与部署主要参考 Hexo 的<a href="https://hexo.io/zh-cn/docs/">官方文档</a>和知乎上的<a href="https://zhuanlan.zhihu.com/p/102592286">技术分享</a>。但实际操作过程中的问题也层出不穷。</p><p>安装 Hexo 需要首先安装 <a href="https://nodejs.org/en">Node.js</a> 和 <a href="https://git-scm.com/">Git</a>。博主的系统环境是 64 位 Windows 10，安装这两款软件还是比较顺利，参考知乎的<a href="https://zhuanlan.zhihu.com/p/102592286">技术分享</a>即可，也没有遇到什么大坑。博主安装的版本分别是 Node.js v18.16.0 LTS 和 Git v2.40.6。成功配置后，可以在命令行界面输入 <code>npm -v</code> 查看 npm 版本；同时，可以在任何文件路径下点击鼠标右键(或者 Shift + 右键)，点击 Git Bash Here，打开Git Bash 命令行界面。进一步的配置，可以在 Git Bash 命令行中进行，主要有两个问题值得注意。</p><ul><li><p><strong>npm 包的安装路径</strong></p><p>npm， 即 <strong>N</strong>ode <strong>P</strong>ackage <strong>M</strong>anager。查看 npm 的默认安装路径可以用指令</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">ls</span><br></code></pre></td></tr></table></figure><p>Windows 10下默认的<strong>全局安装路径</strong>通常是 C:\Users\&lt;user name&gt;\AppData\Roaming\npm, 担心占用C盘空间的话可以通过</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;File Path&quot;</span> <br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;File Path&quot;</span><br></code></pre></td></tr></table></figure><p>进行设置 （另外还需要相应的配置环境变量）, 具体过程可以参考<a href="https://cloud.tencent.com/developer/article/1834666">这篇文章</a>。npm大概有以下几种不同的包安装方式，可以按需使用：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install package <span class="hljs-comment">#安装到项目路径，不在package.json中写入依赖</span><br>npm install package -g <span class="hljs-comment">#安装到全局目录下</span><br>npm install package --save <span class="hljs-comment">#安装到项目路径下，并写入依赖</span><br></code></pre></td></tr></table></figure></li><li><p><strong>Git 与 Github 的绑定</strong></p><p>使用 Git 上传文件至 Github 时，为了免除每次输入口令的麻烦，通常使用 SSH 公钥登录。需要首先生成公钥，然后在 Github 中添加公钥。具体步骤如下：</p><ol><li>Git 中生成密钥: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-kengen -t rsa<br></code></pre></td></tr></table></figure></li><li>在密钥目录下，查看公钥： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure></li><li><strong>Ctrl + Insert</strong> 复制公钥 (Git 中的复制和粘贴分别是 Ctrl + Insert 和 Shift + Insert)；</li><li>在 Github 个人主页中，依次点击 <strong>Settings</strong> -&gt; <strong>SSH and GPG Keys</strong> -&gt; <strong>New SSH key</strong> -&gt; 粘贴 id_rsa.pub 至 Key 文本框内-&gt; <strong>Add SSH Key</strong>；</li><li>在 Git Bash 中验证是否成功: <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure></li><li>验证用户名和邮箱 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.mail <span class="hljs-string">&quot;&lt;mail address&gt;&quot;</span><br>git config --global user.name <span class="hljs-string">&quot;&lt;UserName&gt;&quot;</span><br></code></pre></td></tr></table></figure></li></ol></li></ul><h2 id="3-安装-Hexo">3. 安装 Hexo</h2><p>完成环境的准备工作后，可以使用 npm 全局安装 Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>默认应该是安装最新版。博主安装的版本是 v6.3.0。然后，建立一个文件夹用于存放博客文件，在该文件夹下打开 Git Bash，运行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init  <span class="hljs-comment">#在文档路径下建立初始化必要文件</span><br>hexo g  <span class="hljs-comment">#生成静态页面</span><br>hexo s  <span class="hljs-comment">#将页面部署到本地</span><br></code></pre></td></tr></table></figure><p>顺利完成的话（通常本地查看不太会出现问题），便可以在 localhost:4000 查看生成的静态页面以及默认生成的第一篇 Hello World 博客。</p><p>Hexo 初始化后的文件夹将出现 scaffolds, source, source/_posts, themes 等几个文件夹， 以及 _config.yml 等几个文件。以下重点介绍几个文件(夹)的功能：</p><ul><li>scaffolds：存储文章模板。默认有 <a href="http://draft.md">draft.md</a>, <a href="http://page.md">page.md</a>, <a href="http://post.md">post.md</a>。主要是设置文章的 Front-matter, 具体支持的参数和关键字随主题而异；</li><li>source：存储用户资源， 包括 Markdown 文档、图片等。在使用Git上传时， 除 _posts 文件夹外， 其它以 “_” 开头的文件(夹)会被自动忽略。</li><li>public： 用于存放解析后的文件；</li><li>package.json: 已安装的程序信息；</li><li>_config.yml: 页面的配置信息。可以设置主题、页面标题等内容；</li></ul><h2 id="4-一键部署-Hexo-到-Github">4. 一键部署 Hexo 到 Github</h2><p>首先，在 Github 创建自己的 Github Pages。过程很简单，即新建以 &lt;UserName&gt;.github.io 为名称的仓库，并设置为 Public， 即可。</p><p>接下来，在 _config.yml 文件中添加以下内容:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com：&lt;UserName&gt;/&lt;UserName&gt;.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>在<strong>博客文件夹</strong>下安装插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>运行以下指令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean <span class="hljs-comment">#清楚缓存文件db.json和已生成的静态文件public</span><br>hexo g <span class="hljs-comment">#生成网站静态文件</span><br>hexo d <span class="hljs-comment">#将静态文件推送到指定的远端仓库分支中，并且完全覆盖仓库内容</span><br></code></pre></td></tr></table></figure><p>完成之后， 在浏览器中，即可输入 https://&lt;UserName&gt;.github.io 访问博客网页了。</p><div class="note note-warning">            <ul><li><strong>Tips</strong>：关于 <code>hexo d</code> 失败的几种解决方案<ul><li>出现 Recv failure 等无法上传的问题： 通常跟网络环境有关系。博主之前使用的 https 指定仓库地址，频繁无法上传页面。不管是否配置代理，都不好使。在 _config.yml 中将 https 换成 git@ 的方式之后没有再报错了。</li><li>注意提前验证邮箱和用户名，参考 Part 2 与 Github 绑定部分。</li><li>尝试清除缓存文件重新上传， 即删除 .deploy_git 文件，重新运行清除、生成、上传命令。</li></ul></li></ul>          </div><h2 id="5-域名解析">5. 域名解析</h2><p>通过 Github Pages 托管的个人博客域名是固定的，不够个性。私以为，只有拥有名片般域名的博客才是完整的。博主遂斥重金 (200多块钱，可以用 3 年，其实也还好。。。) 在 <a href="https://hk.godaddy.com/en">Godaddy</a> 购买了该域名。</p><p>域名提供商也可以选择国内的腾讯云或者阿里云等。域名的价格通常第一年会有优惠，后面几年会高一些，随个人消费能力而定了。通常的规律是简短且含义丰富的域名价格高；热门后缀，如 .ai 等价格高。</p><p>购买域名后需要在域名提供商处添加 DNS 解析规则，具体可以参考 <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">Github 文档</a>。 简单来说，需要添加 4 条 A 类型记录, 4 条 AAAA 类型记录和 1 条 CNAME 记录, 添加不完整可能出现域名解析失败。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># A 类型记录</span><br>185.199.108.153<br>185.199.109.153<br>185.199.110.153<br>185.199.111.153<br><br><span class="hljs-comment"># AAAA 类型记录</span><br>2606:50c0:8000::153<br>2606:50c0:8001::153<br>2606:50c0:8002::153<br>2606:50c0:8003::153<br><br><span class="hljs-comment"># CNAME 类型记录</span><br>&lt;UserName&gt;.github.io<br></code></pre></td></tr></table></figure><p>在博客文件夹里的 source 文件夹中，添加 CNAME 文件，写入不带 www 的域名 (这样可以同时以不带 www 和带 www 的方式访问页面)。</p><p>完成以上步骤，重新生成并部署 Hexo 至 Github 即可。</p><div class="note note-warning">            <ul><li><strong>Tips</strong>: 网页突然出现域名解析失败<ul><li>Github 似乎会检查 DNS， 若没有通过 DNS 检查，网页可能会出现无法查看的问题，具体可以在仓库中点击 <strong>Settings</strong> -&gt; <strong>Pages</strong>, 查看 Custom domain。</li><li>域名似乎还需要通过 Verify。 在个人主页中，点击 <strong>Settings</strong> -&gt; <strong>Pages</strong>。 按照要求在域名服务商处添加一条 TXT 类型的记录，然后点击 <strong>Verify</strong>。 通过后会显示 Verified。</li><li>检查 CNAME 文件是否正确。</li></ul></li></ul>          </div><div class="note note-danger">            <p><strong>注意</strong>：博主配置完后发现链接无法升级到 https (安全性还是很有必要的)。经过一番检查，发现从 Godaddy 购买的域名会默认添加一条 Parked 记录。删除该条记录后， Github会自动升级链接。事实上，在 DNS 解析中，不应该保留多余的 A 类型记录。</p>          </div><h2 id="结语">结语</h2><p>回想个人博客部署的过程，发现还是蛮曲折的，事毕之后也是颇为激动。事实上，以上的步骤还只完成了基本的搭建和部署，进一步还可以做个性化定制，添加自己喜欢的主题等。总之，作为一个开始，希望自己费心搭建的博客能见证我的成长和变化，发挥价值。</p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023-hello-world.html"/>
    <url>/2023-hello-world.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
